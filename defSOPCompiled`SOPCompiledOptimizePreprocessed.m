System`HoldComplete[Global`RedefinePublicFunction[SOPCompiled`SOPCompiledOptimizePreprocessed[System`Pattern[Global`engine, SOPCompiled`SOPCompiled[System`Pattern[Global`a, System`Blank[System`Association]]]], System`PatternTest[System`Pattern[Global`dataValues, System`Blank[]], Global`NumericVectorQ], System`Pattern[Global`flattenedSparseDerivativeZtoYIndicesCIndex, System`List[System`BlankSequence[System`Integer]]], System`Pattern[Global`xIndicesCIndex, System`List[System`BlankSequence[System`Integer]]], System`Pattern[Global`yIndicesCIndex, System`List[System`BlankSequence[System`Integer]]], System`Pattern[Global`options, System`OptionsPattern[]]], "using the given engine, solves the given optimization problem, taking ps, select and ys implicitly only (they have already been converted to the *indices*-form which is sent over to the C code), and data only by values", System`With[System`List[System`Set[Global`partitions, 1], System`Set[Global`partition, 0]], System`Module[System`List[Global`val, System`Set[Global`lengthz, Global`a["lengthz"]], System`Set[Global`lengthfz, Global`a["lengthfz"]]], System`CompoundExpression[Global`SOPCompiledEnsureInstalled[Global`engine], System`Assert[System`IntegerQ[SOPCompiled`lengthz]], System`Assert[System`SameQ[SOPCompiled`Private`lengthzGet[], Global`lengthz]], System`Assert[System`SameQ[SOPCompiled`Private`lengthfzGet[], Global`lengthfz]], SOPCompiled`Private`receiveSharedOptimizationData[Global`dataValues], System`Assert[System`SameQ[SOPCompiled`Private`xGet[], Global`dataValues]], SOPCompiled`Private`setPartitions[1], SOPCompiled`Private`receiveOptimizationData[Global`partition, Global`flattenedSparseDerivativeZtoYIndicesCIndex, Global`xIndicesCIndex, Global`yIndicesCIndex], System`If[System`SameQ[System`OptionValue[System`Method], "CUDA"], System`CompoundExpression[SOPCompiled`Private`buildFxAndJFxAndSolveRepeatedlyCUDA[1, 1, Global`partition, System`OptionValue[System`MaxIterations]], System`Null], System`CompoundExpression[System`Assert[System`SameQ[System`OptionValue[System`Method], "CPU"]], SOPCompiled`Private`buildFxAndJFxAndSolveRepeatedly[Global`partition, System`OptionValue[System`MaxIterations]], System`Null]], System`With[System`List[System`Set[Global`y1, SOPCompiled`Private`getY[Global`partition, System`Length[Global`yIndicesCIndex]]]], System`CompoundExpression[System`Assert[System`Equal[System`Length[Global`y1], System`Length[Global`yIndicesCIndex]]], Global`y1]]]]], System`Condition[System`Pattern[Global`y1, System`Blank[]], System`And[Global`NumericVectorQ[Global`y1], System`Greater[System`Length[Global`y1], 0]]], "", System`Rule[System`Options, System`List[System`Rule[System`MaxIterations, 1], System`Rule[System`Method, "CPU"]]]]]