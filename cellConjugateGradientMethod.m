System`Cell[System`BoxData[System`RowBox[System`List["PRedefinePublicFunction", "[", "\[IndentingNewLine]", System`RowBox[System`List[System`RowBox[System`List["ConjugateGradientMethod", "[", System`RowBox[System`List["A_", System`RowBox[System`List["(*", System`RowBox[System`List["?", "NumericMatrixQ"]], "*)"]], ",", "b_", System`RowBox[System`List["(*", System`RowBox[System`List["?", "NumericVectorQ"]], "*)"]], ",", System`RowBox[System`List["x0i_:", "Null"]], ",", System`RowBox[System`List["rIsSufficientlySmall_:", System`RowBox[System`List["(", System`RowBox[System`List["False", "&"]], ")"]]]]]], "]"]], "\[IndentingNewLine]", ",", "\"A symmetric and positive definite. From wikipedia. abortQ is passed rk+1 and if it returns True we stop. Use for testing and learning purposes: CG without preconditioning oftern performs horribly. Prefer LinearSolve/LeastSquares for strong solvers.\"", "\[IndentingNewLine]", ",", System`RowBox[System`List["Module", "[", System`RowBox[System`List[System`RowBox[System`List["{", System`RowBox[System`List["x", ",", "r", ",", "rk", ",", "p", ",", "k", ",", "alpha", ",", "beta"]], "}"]], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", System`RowBox[System`List[System`RowBox[System`List["Assert", "[", System`RowBox[System`List[System`RowBox[System`List["MatrixWidth", "@", "A"]], "===", System`RowBox[System`List["MatrixHeight", "@", "A"]]]], "]"]], ";", "\[IndentingNewLine]", System`RowBox[System`List["Assert", "[", System`RowBox[System`List[System`RowBox[System`List["Length", "@", "b"]], "===", System`RowBox[System`List["MatrixHeight", "@", "A"]]]], "]"]], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", System`RowBox[System`List["x", "=", System`RowBox[System`List["If", "[", System`RowBox[System`List[System`RowBox[System`List["x0i", "===", "Null"]], ",", System`RowBox[System`List["Zeros", "@", System`RowBox[System`List["MatrixWidth", "@", "A"]]]], ",", "x0i"]], "]"]]]], ";", System`RowBox[System`List["(*", System`RowBox[System`List["The", " ", "input", " ", "vector", " ", "x0", " ", "can", " ", "be", " ", "an", " ", "approximate", " ", "initial", " ", "solution", " ", "or", " ", "0."]], "*)"]], "\[IndentingNewLine]", "\[IndentingNewLine]", System`RowBox[System`List["r", "=", System`RowBox[System`List["b", "-", System`RowBox[System`List["A", ".", "x"]]]]]], ";", "\[IndentingNewLine]", System`RowBox[System`List["p", "=", "r"]], ";", "\[IndentingNewLine]", System`RowBox[System`List["Repeat", "[", System`RowBox[System`List[System`RowBox[System`List["MatrixHeight", "@", "A"]], System`RowBox[System`List["(*", System`RowBox[System`List["todo", " ", "correct", " ", "maximum", " ", System`RowBox[System`List["amount", "?"]]]], "*)"]], ",", "\[IndentingNewLine]", System`RowBox[System`List[System`RowBox[System`List["alpha", "=", System`RowBox[System`List[System`RowBox[System`List["r", ".", "r"]], "/", System`RowBox[System`List["(", System`RowBox[System`List["p", ".", System`RowBox[System`List["(", System`RowBox[System`List["A", ".", "p"]], ")"]]]], ")"]]]]]], ";", "\[IndentingNewLine]", System`RowBox[System`List["x", "=", System`RowBox[System`List["x", "+", System`RowBox[System`List["alpha", " ", "p"]]]]]], ";", "\[IndentingNewLine]", System`RowBox[System`List["rk", "=", "r"]], ";", "\[IndentingNewLine]", System`RowBox[System`List["r", "=", System`RowBox[System`List["rk", "-", System`RowBox[System`List["alpha", " ", System`RowBox[System`List["A", ".", "p"]]]]]]]], ";", "\[IndentingNewLine]", System`RowBox[System`List["If", "[", System`RowBox[System`List[System`RowBox[System`List["rIsSufficientlySmall", "[", "r", "]"]], ",", System`RowBox[System`List["Break", "[", "]"]]]], "]"]], ";", "\[IndentingNewLine]", System`RowBox[System`List["beta", "=", System`RowBox[System`List[System`RowBox[System`List["r", ".", "r"]], "/", System`RowBox[System`List["(", System`RowBox[System`List["rk", ".", "rk"]], ")"]]]]]], ";", "\[IndentingNewLine]", System`RowBox[System`List["p", "=", System`RowBox[System`List["r", "+", System`RowBox[System`List["beta", " ", "p"]]]]]], ";"]]]], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"]], ";", "\[IndentingNewLine]", "x"]]]], "\[IndentingNewLine]", "]"]], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", "_"]], System`RowBox[System`List["(*", System`RowBox[System`List["?", "NumericVectorQ"]], "*)"]], "\[IndentingNewLine]", "]"]]], "Input", System`Rule[System`CellChangeTimes, System`List[System`List[3.6860780044881935`*^9, 3.6860781924418726`*^9], System`List[3.68607827075346`*^9, 3.6860785798004093`*^9], System`List[3.6860788746906414`*^9, 3.6860789083955917`*^9], System`List[3.6860789823781652`*^9, 3.6860790269566174`*^9], System`List[3.6860790795403605`*^9, 3.686079098052639`*^9], System`List[3.6860791366769476`*^9, 3.6860791414414463`*^9], System`List[3.6860791800041666`*^9, 3.6860791891145716`*^9], System`List[3.686079264629216`*^9, 3.686079321035112`*^9], System`List[3.6860793585219903`*^9, 3.686079362240204`*^9], System`List[3.6860794395192995`*^9, 3.6860794414271297`*^9], System`List[3.6860794937879114`*^9, 3.6860795031136155`*^9], System`List[3.6860795450976295`*^9, 3.686079548288205`*^9], System`List[3.686079694129036`*^9, 3.6860796995661974`*^9], System`List[3.686079762144414`*^9, 3.6860797645976353`*^9], System`List[3.6860801056296997`*^9, 3.686080161272169`*^9], System`List[3.686080250082451`*^9, 3.6860802516761775`*^9], 3.686419610168489`*^9, System`List[3.6864196785600195`*^9, 3.686419688018261`*^9], System`List[3.686419801471567`*^9, 3.686419804803153`*^9]]], System`Rule[System`CellTags, "depersistedCell76f72057-87cc-496b-90fc-eecc1e0b4845"]]