System`HoldComplete[System`CompoundExpression[Global`RedefinePublicFunction[System`List[], Global`NumberToNaturalNumberLeafTree[System`PatternTest[System`Pattern[Global`n, System`Blank[System`Integer]], System`Positive]], "inverse of NaturalNumberLeafTreeToNumber, undefined for numbers not created by that", System`With[System`List[System`Set[Global`factorization, System`FactorInteger[Global`n]]], System`CompoundExpression[System`Assert[System`Greater[System`Length[Global`factorization], 0]], System`Assert[System`Implies[System`Unequal[System`Length[Global`factorization], 1], System`Equal[System`Part[Global`factorization, 1, 1], 3]]], System`If[System`Equal[System`Part[Global`factorization, 1, 1], 2], System`Part[Global`factorization, 1, 2], System`With[System`List[System`Set[Global`childCodes, Global`NumberToNaturalNumberList[Global`n, 1]]], System`List[System`Set[Global`childTrees, System`Map[Global`NumberToNaturalNumberLeafTree, Global`childCodes]]], System`Apply[System`First[Global`childTrees], System`Rest[Global`childTrees]]]]]], System`Alternatives[System`Blank[System`Integer], System`Blank[]], "", System`Rule[System`Options, System`OptionValue[Global`PRedefinePublicFunctionAlternatives, System`List[], System`Options]]], System`Module[System`List[Global`defineAlternative$], System`CompoundExpression[System`SetAttributes[Global`defineAlternative$, System`HoldAll], System`SetDelayed[Global`defineAlternative$[System`Pattern[Global`def$, System`Blank[]], System`Pattern[Global`separateUsage$, System`Blank[System`String]], System`Pattern[Global`body$, System`Blank[]]], Global`DefinePublicFunction[Global`def$, Global`separateUsage$, Global`body$, System`Alternatives[System`Blank[System`Integer], System`Blank[]], ""]], System`SetDelayed[Global`defineAlternative$[System`Pattern[Global`def$, System`Blank[]], System`Pattern[Global`body$, System`Blank[]]], Global`DefinePublicFunction[Global`def$, "inverse of NaturalNumberLeafTreeToNumber, undefined for numbers not created by that", Global`body$, System`Alternatives[System`Blank[System`Integer], System`Blank[]], ""]], System`Apply[Global`defineAlternative$, System`Unevaluated[System`List[]], System`List[1]], System`Null]], System`Null]]