System`HoldComplete[System`CompoundExpression[Global`RedefinePublicFunction[System`List[], Global`NaturalNumberLeafTreeToNumber[System`PatternTest[System`Pattern[Global`n, System`Blank[System`Integer]], System`Positive]], "convert an expression with positive integer leaves only to a single positive number. Note that the mapping is injective, but not bijective (due to use of NaturalNumberListToNumber).\n\nLeaves are 2^n where n is the number stored at them, nodes are 3^c1*5^c2*7^c3*...\n\nNote: Much too slow for any practical purposes", System`Power[2, Global`n], System`PatternTest[System`Blank[System`Integer], System`Positive], "", System`Rule[System`Options, System`OptionValue[Global`PRedefinePublicFunctionAlternatives, System`List[], System`Options]]], System`Module[System`List[Global`defineAlternative$], System`CompoundExpression[System`SetAttributes[Global`defineAlternative$, System`HoldAll], System`SetDelayed[Global`defineAlternative$[System`Pattern[Global`def$, System`Blank[]], System`Pattern[Global`separateUsage$, System`Blank[System`String]], System`Pattern[Global`body$, System`Blank[]]], Global`DefinePublicFunction[Global`def$, Global`separateUsage$, Global`body$, System`PatternTest[System`Blank[System`Integer], System`Positive], ""]], System`SetDelayed[Global`defineAlternative$[System`Pattern[Global`def$, System`Blank[]], System`Pattern[Global`body$, System`Blank[]]], Global`DefinePublicFunction[Global`def$, "convert an expression with positive integer leaves only to a single positive number. Note that the mapping is injective, but not bijective (due to use of NaturalNumberListToNumber).\n\nLeaves are 2^n where n is the number stored at them, nodes are 3^c1*5^c2*7^c3*...\n\nNote: Much too slow for any practical purposes", Global`body$, System`PatternTest[System`Blank[System`Integer], System`Positive], ""]], System`Apply[Global`defineAlternative$, System`Unevaluated[System`List[System`List[Global`NaturalNumberLeafTreeToNumber[System`Pattern[Global`n, System`Blank[]][System`Pattern[Global`args, System`BlankNullSequence[]]]], System`With[System`List[System`Set[Global`children, System`List[Global`n, Global`args]]], System`List[System`Set[Global`childrenCodes, System`Map[Global`NaturalNumberLeafTreeToNumber, Global`children]]], Global`NaturalNumberListToNumber[Global`childrenCodes, 1]]]]], System`List[1]], System`Null]], System`Null]]