System`HoldComplete[Global`RedefinePublicFunction[Global`ConjugateGradientMethod[System`Pattern[Global`A, System`Blank[]], System`Pattern[Global`b, System`Blank[]], System`Optional[System`Pattern[Global`x0i, System`Blank[]], System`Null], System`Optional[System`Pattern[Global`rIsSufficientlySmall, System`Blank[]], System`Function[System`False]]], "A symmetric and positive definite. From wikipedia. abortQ is passed rk+1 and if it returns True we stop. Use for testing and learning purposes: CG without preconditioning oftern performs horribly. Prefer LinearSolve/LeastSquares for strong solvers.", System`Module[System`List[Global`x, Global`r, Global`rk, Global`p, Global`k, Global`alpha, Global`beta], System`CompoundExpression[System`Assert[System`SameQ[Global`MatrixWidth[Global`A], Global`MatrixHeight[Global`A]]], System`Assert[System`SameQ[System`Length[Global`b], Global`MatrixHeight[Global`A]]], System`Set[Global`x, System`If[System`SameQ[Global`x0i, System`Null], Global`Zeros[Global`MatrixWidth[Global`A]], Global`x0i]], System`Set[Global`r, System`Plus[Global`b, System`Times[-1, System`Dot[Global`A, Global`x]]]], System`Set[Global`p, Global`r], Global`Repeat[Global`MatrixHeight[Global`A], System`CompoundExpression[System`Set[Global`alpha, System`Times[System`Dot[Global`r, Global`r], System`Power[System`Dot[Global`p, System`Dot[Global`A, Global`p]], -1]]], System`Set[Global`x, System`Plus[Global`x, System`Times[Global`alpha, Global`p]]], System`Set[Global`rk, Global`r], System`Set[Global`r, System`Plus[Global`rk, System`Times[-1, System`Times[Global`alpha, System`Dot[Global`A, Global`p]]]]], System`If[Global`rIsSufficientlySmall[Global`r], System`Break[]], System`Set[Global`beta, System`Times[System`Dot[Global`r, Global`r], System`Power[System`Dot[Global`rk, Global`rk], -1]]], System`Set[Global`p, System`Plus[Global`r, System`Times[Global`beta, Global`p]]], System`Null]], Global`x]], System`Blank[], ""]]