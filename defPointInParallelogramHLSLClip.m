System`HoldComplete[Global`RedefinePublicFunction[Global`PointInParallelogramHLSLClip[System`Pattern[Global`p, System`List[System`Blank[], System`Blank[]]], System`Pattern[Global`a, System`List[System`Blank[], System`Blank[]]], System`Pattern[Global`b, System`List[System`Blank[], System`Blank[]]], System`Pattern[Global`c, System`List[System`Blank[], System`Blank[]]]], "Polygon@{a,a+b,a+b+c,a+c}. test returned {st, {1,1}-st} for s and t between 0 and 1\n\n\n * Given a point p and a parallelogram defined by point a and vectors b and c, determines in p is inside the parallelogram. \n * returns a 4-vector that can be used with the clip instruction.\n */\nfloat4 PointInParallelogram(float2 p, float2 a, float4 bc)\n{\n\t// unoptomized form:\n\t//float2 o = p - a;\n\t//float2 b = bc.xy;\n\t//float2 c = bc.zw;\n\t//float d = cross(b, c);\n\t//float s = -cross(o, b) / d;\n\t//float t = cross(o, c) / d;\n\t// test for s and t between 0 and 1\n\t//return float4(s, 1 - s, t, 1 - t);\n\n\tfloat2 o = p - a;\n\t// precompute 1/d\n\tfloat invD = 1/cross(bc.xy, bc.zw);\n\t// Compute an optimized o x b and o x c, leveraging that b and c are in the same vector register already (and free swizzles):\n\t//   (o.x * b .y  - o.y * b .x, o.x *  c.y - o.y *  c.x) ==\n\t//   (o.x * bc.y  - o.y * bc.x, o.x * bc.w - o.y * bc.z) ==\n\t//    o.x * bc.yw - o.y * bc.xz\n\tfloat2 st = (o.x * bc.yw - o.y * bc.xz) * float2(-invD, invD);\n\t// test for s and t between 0 and 1\n\treturn float4(st, float2(1,1) - st);\n}\n", System`With[System`List[System`Set[Global`o, System`Plus[Global`p, System`Times[-1, Global`a]]], System`Set[Global`invD, System`Times[1, System`Power[Global`Cross2D[Global`b, Global`c], -1]]]], System`List[System`Set[Global`st, System`Times[System`Plus[System`Times[System`First[Global`o], System`List[System`Last[Global`b], System`Last[Global`c]]], System`Times[-1, System`Times[System`Last[Global`o], System`List[System`First[Global`b], System`First[Global`c]]]]], System`List[System`Times[-1, Global`invD], Global`invD]]]], System`Join[Global`st, System`Plus[System`List[1, 1], System`Times[-1, Global`st]]]], System`Blank[], ""]]