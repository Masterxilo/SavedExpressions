System`HoldComplete[Global`RedefinePublicFunction[Global`RulesToHash[System`Pattern[Global`rules, System`List[System`BlankNullSequence[System`Rule]]], System`Pattern[Global`hashSize, System`Blank[System`Integer]]], "Converts a list of rules (intpreted Verbatim, patterns are not recognized) to a custom hash-map structure, uploaded to a symbol x which is returned. Note that the result of this is not serializable unless you go through all down values for the returned symbol. Cf. RulesToHash.nb.\n\nThe hash map returns Missing[] for values that are not present (uses lists in the hash buckets).\n\nPerformance might be better or worse than Association (depending on whether that already uses a hash?).", System`With[System`List[System`Set[Global`x, System`Unique[]]], System`Module[System`List[Global`hash, Global`array, Global`enter], System`CompoundExpression[System`SetDelayed[Global`hash[System`Pattern[Global`k, System`Blank[]]], System`Plus[1, System`Mod[System`Hash[Global`k], Global`hashSize]]], System`Set[Global`array, System`ConstantArray[System`List[], Global`hashSize]], System`SetDelayed[Global`enter[System`Pattern[Global`r, System`Rule[System`Pattern[Global`k, System`Blank[]], System`Blank[]]]], System`AppendTo[System`Part[Global`array, Global`hash[Global`k]], Global`r]], System`Scan[Global`enter, Global`rules], System`SetDelayed[Global`x[System`Pattern[Global`k, System`Blank[]]], System`Lookup[System`Part[Global`array, Global`hash[Global`k]], Global`k]], Global`x]]], System`Blank[], ""]]