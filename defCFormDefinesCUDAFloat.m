System`HoldComplete[Global`RedefinePublicFunction[Global`CFormDefinesCUDAFloat[], "gives a C code fragment of #includes, #defines and inline functions\nbuilding up functionality beyond basic C, necessary to make Cform (CformSymbolic) expressions\nevaluate properly (in most cases). Note that many Mathematica expressions cannot be converted by Cform, since basic C (with \nmath.h) doesn't have many of the functions Mathematica has. Still any real valued polynomial (root) and trigonometric terms\nshould be evaluatable.", "\n#include <math.h>\n#define sqrt sqrtf\n#define pow powf\n#define rsqrt(x) (1. / sqrt((x)))\n#define inv(x) (1. / (x))\n#define neg(x) (-(x))\n#define times(x,y) ((x)*(y))\n#define plus(x,y) ((x)+(y))\n\n#define greater(x,y) ((x)>(y))\n#define less(x,y) ((x)<(y))\n#define greaterEqual(x,y) ((x)>=(y))\n#define lessEqual(x,y) ((x)>=(y))\n#define equal(x,y) ((x)==(y))\n\n#define and(x,y) ((x)&&(y))\n#define or(x,y) ((x)||(y))\n\n#define ifthenelse(test,a,b) ((test) ? (a) : (b))\n\ntemplate<typename T1, typename T2>\ninline\n#ifdef __CUDACC__\n__host__ __device__\n#endif\nfloat max(T1 a, T2 b) { return a > b ? a : b; }\n\n\ntemplate<typename T1, typename T2>\ninline\n#ifdef __CUDACC__\n__host__ __device__\n#endif\nfloat min(T1 a, T2 b) { return a < b ? a : b; }\n\n/*\ntemplate<typename T>\ninline\n*/\n#ifdef __CUDACC__\n__host__ __device__\n#endif\nfloat sqr(float x) { return x*x; }\n", System`Blank[], ""]]