System`HoldComplete[Global`RedefinePublicFunction[System`Condition[Global`GaussNewton[System`PatternTest[System`Pattern[Global`F, System`Blank[]], System`Composition[System`Not, System`VectorQ]], System`PatternTest[System`Pattern[Global`JFx0, System`Blank[]], Global`NumericMatrixQ], System`PatternTest[System`Pattern[Global`x0, System`Blank[]], Global`NumericVectorQ]], System`Equal[System`Last[System`Dimensions[Global`JFx0]], System`Length[Global`x0]]], "GaussNewton[F, x, x0] where F is a numeric real vector (valued function) depending on x.\n\nReturns an assignment y0 such that F(y0) <= F(x0).\n\nDo a gauss-newton step that reduces the 2-norm (aka. 'energy') of this vector.\n\nVariants take a pure function instead of an expression and a precomputed jacobian.\n\nGiven f(x) and x0, computes y0 such that\n\n||f(y0)||_2^2 \[LessEqual] ||f(x0)||_2^2\n\nThis is done by locally linearizing f and finding h such that\n\n||f(x0 + h)||_2^2 ~ ||f(x0) + Jf(x0) h||_2^2 <= ||f(x0)||_2^2\n\nIn fact, h = argmin_h ||f(x0) + Jf(x0) h||_2^2\n\nIf f is affine in each argument, this returns the global minimum in one step.\n\nIf the h found thusly does not *actually* decrease f, it is scaled by 0.5 repeatedly until it does (gradient descent with scale parameter).\n\nReturns:\n{finalEnergy,{{x\[Rule]y0}..}}\n\nor, when given pure functions\n\n{finalEnergy, {y0..}}\n\n---\nsee LocalGaussNewton package for alternative interfaces\n", System`With[System`List[System`Set[Global`Fatx0, Global`F[Global`x0]]], System`Module[System`List[Global`h, Global`y0, Global`norm2Fatx0, Global`norm2Faty0, System`Trace], System`CompoundExpression[System`SetDelayed[System`Trace[System`Pattern[Global`x, System`BlankNullSequence[]]], System`Message[System`MessageName[Global`GaussNewton, "trace"], Global`x, System`Null, System`Null]], System`Assert[Global`NumericVectorQ[Global`Fatx0], "F@x0 must be a numeric vector"], System`Assert[System`Equal[System`Length[Global`Fatx0], System`Length[Global`JFx0]], "F@x0 must have same height as JFx0"], System`Set[Global`norm2Fatx0, Global`Norm2[Global`Fatx0]], System`Trace[System`LeastSquares, System`Dimensions[Global`JFx0]], System`Set[Global`h, System`LeastSquares[Global`JFx0, System`Times[-1, Global`Fatx0]]], System`Assert[Global`NumericVectorQ[Global`h]], System`Trace["gives ", Global`h], System`SetDelayed[Global`y0, System`Plus[Global`x0, Global`h]], System`Set[Global`norm2Faty0, Global`Norm2[Global`F[Global`y0]]], System`Trace["norm2Faty0 ", Global`norm2Faty0], System`Trace["||F[x0 + 2*h]||_2^2 would be ", Global`Norm2[Global`F[System`Plus[Global`x0, System`Times[2, Global`h]]]]], System`While[System`Greater[Global`norm2Faty0, Global`norm2Fatx0], System`CompoundExpression[System`TimesBy[Global`h, 0.5`], System`Set[Global`norm2Faty0, Global`Norm2[Global`F[Global`y0]]], System`Trace["Reduced stepsize"]]], System`List[Global`norm2Faty0, Global`y0]]]], System`Blank[], ""]]